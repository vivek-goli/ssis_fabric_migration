{
    "displayName": "1-lookups",
    "type": "DataPipeline",
    "definition": {
        "parts": [
            {
                "path": "pipeline.json",
                "payload": "",
                "payloadType": "InlineBase64"
            }
        ]
    }
}