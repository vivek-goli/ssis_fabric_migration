{
    "displayName": "multiple-merges",
    "type": "DataPipeline",
    "definition": {
        "parts": [
            {
                "path": "pipeline.json",
                "payload": "",
                "payloadType": "InlineBase64"
            }
        ]
    }
}